import { NextRequest, NextResponse } from 'next/server';

/**
 * GET handler for the mensa API endpoint
 */
export async function GET(request: NextRequest) {
  try {
    // Get the full URL with all query parameters
    const url = request.nextUrl;
    
    // In production (Render) environment, forward to the Render API
    if (process.env.NODE_ENV === 'production') {
      // Get the base URL for the Render API
      const mensaApiUrl = process.env.MENSA_API_URL || 'https://hbrs-mensa-api.onrender.com/api/mensa';
      
      // Create the URL for the Render API
      const renderApiUrl = new URL(mensaApiUrl);
      
      // Copy all search parameters
      url.searchParams.forEach((value, key) => {
        renderApiUrl.searchParams.append(key, value);
      });
      
      console.log(`Forwarding to Render API: ${renderApiUrl.toString()}`);
      
      // Use fetch to call the Render API
      const response = await fetch(renderApiUrl.toString());
      
      if (!response.ok) {
        throw new Error(`Render API returned ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      return NextResponse.json(data);
    } 
    // In development, use the child_process implementation
    else {
      const { exec } = await import('child_process');
      const { promisify } = await import('util');
      const path = await import('path');
      const fs = await import('fs');
      
      const execAsync = promisify(exec);
      
      // Get parameters from the URL
      const searchParams = url.searchParams;
      const mensa = searchParams.get('mensa') || 'SanktAugustin';
      const lang = searchParams.get('lang') || 'en';
      const date = searchParams.get('date') || formatDate(new Date());
      const filterCategories = searchParams.getAll('filterCategories') || ['Dessert'];
      
      // Boolean flags
      const showAllAllergens = searchParams.has('showAllAllergens');
      const showAdditives = searchParams.has('showAdditives');
      const showAllPrices = searchParams.has('showAllPrices');
      const vegan = searchParams.has('vegan');
      const vegetarian = searchParams.has('vegetarian');
      
      // Build the command
      const scriptPath = path.join(process.cwd(), 'BackEnd', 'Sankt_Augustin_mensa', 'src', 'bonn_mensa', 'mensa.py');
      
      // Ensure the script exists
      if (!fs.existsSync(scriptPath)) {
        console.error(`Python script not found at: ${scriptPath}`);
        return NextResponse.json({
          error: `Python script not found at: ${scriptPath}`
        }, { status: 404 });
      }
      
      // Use --json flag for JSON output
      let command = `python "${scriptPath}"`;
      command += ` --mensa ${mensa}`;
      command += ` --lang ${lang}`;
      command += ` --date ${date}`;
      command += ` --json`; // Request JSON output
      
      if (filterCategories.length > 0) {
        command += ` --filter-categories ${filterCategories.join(' ')}`;
      }
      
      if (showAllAllergens) command += ' --show-all-allergens';
      if (showAdditives) command += ' --show-additives';
      if (showAllPrices) command += ' --show-all-prices';
      if (vegan) command += ' --vegan';
      if (vegetarian) command += ' --vegetarian';
      
      console.log(`Executing: ${command}`);
      
      // Execute the command with a timeout of 10 seconds
      const { stdout, stderr } = await execAsync(command, { timeout: 10000 });
      
      if (stderr && !stderr.includes('Fetching mensa data')) {
        console.error('Error executing mensa command:', stderr);
        
        // Fall back to markdown if there's an issue with JSON
        command = command.replace(' --json', ' --markdown');
        const fallbackResult = await execAsync(command);
        
        return NextResponse.json({ 
          error: stderr,
          markdownData: fallbackResult.stdout,
          params: {
            mensa, lang, date, filterCategories,
            showAllAllergens, showAdditives, showAllPrices, vegan, vegetarian
          }
        }, { status: 200 });
      }
      
      try {
        // Try to extract the JSON part of the output
        const jsonMatch = stdout.match(/(\{[\s\S]*\})/);
        const jsonString = jsonMatch ? jsonMatch[1] : stdout;
        
        // Try to parse as JSON
        const jsonData = JSON.parse(jsonString);
        
        return NextResponse.json({
          data: jsonData,
          params: {
            mensa, lang, date, filterCategories,
            showAllAllergens, showAdditives, showAllPrices, vegan, vegetarian
          }
        });
      } catch (parseError) {
        console.warn('Failed to parse JSON output:', parseError);
        
        // If JSON parsing fails, fall back to markdown
        command = command.replace(' --json', ' --markdown');
        const fallbackResult = await execAsync(command);
        
        return NextResponse.json({
          error: `Failed to parse JSON: ${parseError.message}`,
          markdownData: fallbackResult.stdout || stdout,
          params: {
            mensa, lang, date, filterCategories,
            showAllAllergens, showAdditives, showAllPrices, vegan, vegetarian
          }
        });
      }
    }
  } catch (error) {
    console.error('Error in mensa API route:', error);
    return NextResponse.json({ 
      error: `Internal server error: ${error.message || 'Unknown error'}` 
    }, { status: 500 });
  }
}

// Helper function to format date as YYYY-MM-DD
function formatDate(date: Date): string {
  return date.toISOString().split('T')[0];
}